#include <string>
#include <fstream>
#include <iostream>
#include <vector>
#include <algorithm>

#include "map_reduce/protocol.h"

namespace mapReduce{
//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
    std::vector<KeyVal> Map(const std::string &content) {
        // Your code goes here
        // Hints: split contents into an array of words.
        std::stringstream stringstream(content);
        std::string key;
        std::vector<KeyVal> ret;
        while (stringstream >> key) {
            std::size_t first_not_null = key.find_first_not_of('\0');
            if (first_not_null != std::string::npos)
                ret.emplace_back(key.substr(first_not_null), "1");
        }
        return ret;

    }

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
    std::string Reduce(const std::string &key, const std::vector<std::string> &values) {
        // Your code goes here
        // Hints: return the number of occurrences of the word.
        int sum = 0;
        for (auto &value : values) {
            sum += std::stoi(value);
        }
        return std::to_string(sum);
    }
}